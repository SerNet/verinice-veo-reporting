plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'groovy'
    id 'jacoco'
    id "com.github.spotbugs" version '5.0.12'
    id 'org.cadixdev.licenser' version '0.6.1'
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id 'pmd'
}

version = '0.14-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = '17'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'javax.validation:validation-api'
    implementation 'org.freemarker:freemarker:2.3.31'
    implementation 'com.vladsch.flexmark:flexmark-all:0.64.0'
    implementation 'com.openhtmltopdf:openhtmltopdf-core:1.0.10'
    implementation 'com.openhtmltopdf:openhtmltopdf-pdfbox:1.0.10'
    implementation 'com.openhtmltopdf:openhtmltopdf-slf4j:1.0.10'
    implementation 'com.openhtmltopdf:openhtmltopdf-objects:1.0.10'
    implementation 'org.jfree:jfreechart:1.5.3'
    implementation 'com.helger.font:ph-fonts-api:5.0.0'

    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.7.2'
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'

    runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'com.helger.font:ph-fonts-open-sans:5.0.0'

    testImplementation 'org.spockframework:spock-spring:2.2-groovy-3.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.codehaus.groovy:groovy-json'
    testImplementation 'org.codehaus.groovy:groovy-xml'
}

def continuousIntegrationBuild = rootProject.hasProperty('ci')

spotbugsTest.enabled = false
// write human readable report on normal builds
spotbugsMain.reports {
    // Jenkins needs xml reports to detect and display bugs.
    xml.enabled = continuousIntegrationBuild
    html.enabled = !continuousIntegrationBuild
}

pmd {
    toolVersion = '6.42.0'
    rulesMinimumPriority = 2
    consoleOutput = true
}

pmdTest.enabled = false

license {
    header = file("templates/licenseHeader.txt")
    newLine = false
    exclude "reports/**"
    exclude "templates/*"
    skipExistingHeaders = true
    ext["year"] = java.util.Calendar.getInstance().get(Calendar.YEAR)
    ext["author"] = "git config user.name".execute().text.trim() ?: "<name>"
    style {
        java = 'JAVADOC'
    }
}

springBoot {
    buildInfo {
        properties {
            if (rootProject.hasProperty('ciBuildNumer')) {
                additional = [
                    'ci.buildnumber': rootProject.getProperty('ciBuildNumer'),
                    'ci.jobname': rootProject.getProperty('ciJobName')
                ]
            }
        }
    }
}

test {
    useJUnitPlatform()
}
