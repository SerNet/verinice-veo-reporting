plugins {
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'groovy'
    id 'jacoco'
    id "com.github.spotbugs" version '5.0.14'
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id 'pmd'
    id "com.diffplug.spotless" version "6.16.0"
    id 'com.github.jk1.dependency-license-report' version '2.1'
}

version = '0.20.0-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'com.fasterxml.jackson.module:jackson-module-blackbird'
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'org.freemarker:freemarker:2.3.32'
    implementation 'com.vladsch.flexmark:flexmark:0.64.4'
    implementation 'com.vladsch.flexmark:flexmark-ext-attributes:0.64.4'
    implementation 'com.vladsch.flexmark:flexmark-ext-definition:0.64.4'
    implementation 'com.vladsch.flexmark:flexmark-ext-tables:0.64.4'
    implementation 'com.openhtmltopdf:openhtmltopdf-core:1.0.10'
    implementation 'com.openhtmltopdf:openhtmltopdf-pdfbox:1.0.10'
    implementation 'com.openhtmltopdf:openhtmltopdf-slf4j:1.0.10'
    implementation 'com.openhtmltopdf:openhtmltopdf-objects:1.0.10'
    implementation 'com.openhtmltopdf:openhtmltopdf-objects:1.0.10'
    implementation ('org.apache.xmlgraphics:batik-transcoder:1.16'){
        // work around https://issues.apache.org/jira/browse/BATIK-1289
        exclude group: "xml-apis", module: "xml-apis"
    }
    implementation ('org.apache.xmlgraphics:batik-codec:1.16'){
        // work around https://issues.apache.org/jira/browse/BATIK-1289
        exclude group: "xml-apis", module: "xml-apis"
    }
    implementation 'org.apache.pdfbox:pdfbox:2.0.28'
    implementation 'de.rototor.pdfbox:graphics2d:0.42'
    implementation 'org.jfree:jfreechart:1.5.4'
    implementation 'org.jsoup:jsoup:1.16.1'
    implementation 'com.helger.font:ph-fonts-api:5.0.1'

    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.7.3'
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'

    runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'com.helger.font:ph-fonts-open-sans:5.0.1'

    testImplementation 'org.spockframework:spock-spring:2.3-groovy-4.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.apache.groovy:groovy-json'
    testImplementation 'org.apache.groovy:groovy-xml'
}

def continuousIntegrationBuild = rootProject.hasProperty('ci')

spotbugsTest.enabled = false
// write human readable report on normal builds
spotbugsMain.reports {
    // Jenkins needs xml reports to detect and display bugs.
    xml.enabled = continuousIntegrationBuild
    html.enabled = !continuousIntegrationBuild
}

pmd {
    toolVersion = '6.55.0'
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd-ruleset.xml')
    ruleSets = []
    rulesMinimumPriority = 3
    consoleOutput = true
}

pmdTest.enabled = false

springBoot {
    buildInfo {
        properties {
            if (rootProject.hasProperty('ciBuildNumer')) {
                additional = [
                    'ci.buildnumber': rootProject.getProperty('ciBuildNumer'),
                    'ci.jobname': rootProject.getProperty('ciJobName')
                ]
            }
        }
    }
}

test {
    useJUnitPlatform()
}

spotless {
    groovyGradle {
        // https://github.com/diffplug/spotless/issues/304#issuecomment-426067801
        target 'Jenkinsfile', '*.gradle'
        greclipse()
        indentWithSpaces(4)
        replaceRegex('Excessive line breaks', /\n{3,}/, '\n\n')
        trimTrailingWhitespace()
    }
    java {
        target 'src/**/*.java', 'buildSrc/**/*.java'
        googleJavaFormat()
        importOrder('java', 'jakarta', 'javax', 'org', 'com', 'org.veo', '')
        addStep org.veo.LicenseHeaderStep.create(project.rootDir)
        addStep org.veo.NoWildcardImportsStep.create()
        removeUnusedImports()
        trimTrailingWhitespace()
        replaceRegex('Consecutive empty block comment lines', /( *\*\n){2,}/, '*\n')
        replaceRegex('Empty line at block comment end', / \*\n *\*\//, ' */')
        replaceRegex('Empty comment block', /\/\*+\s+\*\//, '')
        replaceRegex('Empty line after annotation', /(^ +@[a-zA-Z0-9]+\([^)]+\)\n)\n+/, '$1')
        replaceRegex('Empty line inside annotation', /(^ +@[a-zA-Z0-9]+\([^)]+\n)\n+/, '$1')
    }
    groovy {
        target 'src/**/*.groovy', 'buildSrc/**/*.groovy'
        addStep org.veo.LicenseHeaderStep.create(project.rootDir, 'package |runner \\{')
        addStep org.veo.NoWildcardImportsStep.create()
        greclipse()
        importOrder('java', 'javax', 'org', 'com', 'org.veo', '')
        indentWithSpaces(4)
        trimTrailingWhitespace()
        replaceRegex('Excessive line breaks', /\n{3,}/, '\n\n')
        replaceRegex('Extra space around equals sign', /(  += )|( =  +)/, ' = ')
        replaceRegex('Not one space between right round and left curly bracket', /\) *\{/, ') {')
    }
    format 'git', {
        target '**/.gitignore'

        trimTrailingWhitespace()
        endWithNewline()
    }
    json {
        target '**/*.json'
        targetExclude '**/bin/**', '**/target/**'
        gson()
                .indentWithSpaces(2)
        endWithNewline()
    }
}

def licenseFile3rdParty = 'LICENSE-3RD-PARTY.txt'

licenseReport {
    renderers = [
        new com.github.jk1.license.render.TextReportRenderer(licenseFile3rdParty)
    ]
    filters = [
        new com.github.jk1.license.filter.LicenseBundleNormalizer()
    ]
}

// work around for license report not being updated when the project's version number changes
// https://github.com/jk1/Gradle-License-Report/issues/223
generateLicenseReport.outputs.with {
    upToDateWhen { false }
    cacheIf { false }
}

task copy3rdPartyLicenseFile {
    generateLicenseReport.finalizedBy it
    doLast {
        file(licenseFile3rdParty).text = file("${generateLicenseReport.config.outputDir}/${licenseFile3rdParty}").text
    }
}
