image: eclipse-temurin:21-jdk

variables:
  ORG_GRADLE_PROJECT_ci: 'true'

# Verification (tests and code analysis) is unnecessary on 'develop' &
# 'main', because only verified MRs can be merged into those branches.
.verification:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: never
    - if: $CI_COMMIT_BRANCH == "develop"
      when: never
    - when: on_success

stages:
  - build
  - check
  - docker_image
  - deployment

before_script:
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME

build:
  stage: build
  rules:
    - when: on_success
  script:
    - env
    - ./gradlew -i -PciBuildNumer=$CI_PIPELINE_ID -PciJobName=$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME build -x check
    - echo "PROJECT_VERSION=$(./gradlew -q properties --property version| awk '/^version:/ {print $2}')" >> variables.env
  interruptible: true
  artifacts:
    expire_in: 1 week
    reports:
      dotenv: variables.env
    paths:
      - build/libs
  cache:
    - key: gradle
      paths:
        - .gradle
    - key: $CI_PROJECT_PATH
      paths:
        - build
      policy: push

test:
  stage: check
  rules:
    - !reference [.verification, rules]
  script: ./gradlew -i test
  interruptible: true
  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml
  cache:
    - key: gradle
      paths:
        - .gradle
    - key: $CI_PROJECT_PATH
      paths:
        - build
      policy: pull

check:
  stage: check
  rules:
    - !reference [.verification, rules]
  interruptible: true
  script:
    - ./gradlew -i check -x test
  cache:
    - key: gradle
      paths:
        - .gradle
    - key: $CI_PROJECT_PATH
      paths:
        - build
      policy: pull


check_license:
  stage: check
  rules:
    - !reference [.verification, rules]
  interruptible: true
  script:
    - cp LICENSE-3RD-PARTY.txt LICENSE-3RD-PARTY.txt.orig
    - ./gradlew -i generateLicenseReport
    - diff LICENSE-3RD-PARTY.txt LICENSE-3RD-PARTY.txt.orig
    - if [ $? -ne 0 ]; then echo "LICENSE-3RD-PARTY.txt is not up to date, please re-run ./gradlew generateLicenseReport"; exit 1; fi
  cache:
    - key: gradle
      paths:
        - .gradle
    - key: $CI_PROJECT_PATH
      paths:
        - build
      policy: pull


docker_image:
  stage: docker_image
  rules:
    - when: on_success
  interruptible: true
  needs:
   - build
  image:
    name: gcr.io/kaniko-project/executor:v1.21.0-debug
    entrypoint: [""]

  variables:
    IMAGE_NAME: eu.gcr.io/veo-projekt/veo-reporting
    # this does not work in Gitlab < 15.7, so we need the before_script workaround
    # GOOGLE_APPLICATION_CREDENTIALS: $GCR_ACCESS_TOKEN

  before_script:
    - export GOOGLE_APPLICATION_CREDENTIALS=${GCR_ACCESS_TOKEN}

  script:
    - |-
      DESTINATION_ARG="--destination $IMAGE_NAME:gitlab-git-${CI_COMMIT_SHA} --destination $IMAGE_NAME:pipeline-id-${CI_PIPELINE_ID}"
      if [ -n "$CI_COMMIT_TAG" ]; then export DESTINATION_ARG="$DESTINATION_ARG --destination $IMAGE_NAME:$CI_COMMIT_TAG";
        if [ "$CI_COMMIT_REF_NAME" = "main" ]; then export DESTINATION_ARG="$DESTINATION_ARG --destination $IMAGE_NAME:latest"; fi;
      fi;
      if [ "$CI_COMMIT_REF_NAME" = "develop" ]; then export DESTINATION_ARG="$DESTINATION_ARG --destination $IMAGE_NAME:develop"; fi;
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      $DESTINATION_ARG
      --build-arg VEO_REPORTING_VERSION="${PROJECT_VERSION}"
      --label org.opencontainers.image.version="${PROJECT_VERSION}"
      --label org.opencontainers.image.revision=${CI_COMMIT_SHA}

trigger_deployment:
  stage: deployment
  only:
    - develop
    - main
  trigger:
    project: veo/verinice-veo-deployment
